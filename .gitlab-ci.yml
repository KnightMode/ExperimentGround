image: alphine:3.7

variables:
  PACKAGE_PATH: /go/src/gitlab.com/ghanesh.balaji1995/dockerdeploytest

cache: &global_cache
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - /apt-cache
    - $GOPATH/src/github.com
    - $GOPATH/src/golang.org
    - $GOPATH/src/google.golang.org
    - $GOPATH/src/gopkg.in
    - .npm/

.go-cache:
  variables:
    GOPATH: $CI_PROJECT_DIR/.go
  before_script:
    - mkdir -p .go
  cache:
    paths:
      - .go/pkg/mod/

before_script:
  - git config --global url."git@gitlab.com:".insteadOf "https://gitlab.com/"
  - apt-get update -qq
  - apt-get install -qq git
  - 'which ssh-agent || ( apt-get install -qq openssh-client )'
  - eval $(ssh-agent -s)
  - ssh-add <(echo "$SSH_PRIVATE_KEY")
  - mkdir ~/.ssh
  - ssh-keyscan -t rsa devsb01 >> ~/.ssh/known_hosts
  - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  - git remote set-url origin git@gitlab.com/ghanesh.balaji1995/DockerDeployTest.git
  - mkdir -p /go/src/gitlab.com/dockerdeploytest /go/src/_/builds
  - cp -r ${CI_PROJECT_DIR} /go/src/gitlab.com/dockerdeploytest
  - ln -s /go/src/gitlab.com/dockerdeploytest $GOPATH/src/_/builds/dockerdeploytest
  - make dep

stages:
  - lint
  - test
  - publish
  - deploy

lint:
  stage: lint
  extends: .go-cache
  image: golang:1.13
  before_script:
    - go get -u golang.org/x/lint/golint
  script:  echo lint to be fixed

test:
  stage: test
  extends: .go-cache
  image: golang:1.13
  cache:
    <<: *global_cache
  before_script:
    - echo testing
  script:
    - go test ./...

publish:
  image: docker:latest
  stage: publish
  services:
    - docker:dind
  before_script:
    - docker info
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD
  script:
    - docker build -t $BINARY_NAME .
    - docker tag $BINARY_NAME shreegb/docker_deploy_test
    - docker login --username=_ --password=$HEROKU_API_KEY registry.heroku.com
    - docker tag shreegb/docker_deploy_test registry.heroku.com/sgbapp/web
    - docker push registry.heroku.com/sgbapp/web
  only:
    - master

deploy:
  image: node:latest
  cache:
    <<: *global_cache
  stage: deploy
  before_script:
    - echo hello
  services:
    - docker:dind
  script:
    - npm install -g heroku docker
    - heroku container:login
    - heroku container:release web -a sgbapp